<!doctype html>
<html>
<head>
	<%- include asset/lib %>
	<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
  <style type="text/css">
  	.axis path, .axis line {
	    fill: none;
	    stroke: black;
	    shape-rendering: crispEdges;
	}
	.axis text {
	    font-family: sans-serif;
	    font-size: 11px;
	}
	#tooltip {
	    position: absolute;
	    text-align: center;
	    width: 40px;
	    height: auto;
	    padding: 10px;
	    background-color: white;
	    -webkit-border-radius: 10px;
	    -moz-border-radius: 10px;
	    border-radius: 10px;
	    -webkit-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
	    -moz-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
	    box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
	    pointer-events: none;
	}
	#tooltip.hidden {
	    display: none;
	}
	#tooltip p {
	    margin: 0;
	    font-family: sans-serif;
	    font-size: 16px;
	    line-height: 20px;
	}
  </style>

</head>
<body class="container">
<%- include navbar %>
<a href="/result/" class="btn btn-primary" style="margin: 8px;">Back</a>
<div id="tooltip" class="hidden">
    <p><span id="value">100</span>
    </p>
</div>

</body>
<script type="text/javascript">
	var gameResult = <%- JSON.stringify(gameResult) %>;
	var gameData = <%- JSON.stringify(gameData) %>;

  	var margins = {
	    top: 12,
	    left: 48,
	    right: 24,
	    bottom: 24
	},
	legendPanel = {
	    width: 180
	},
	width = 700 - margins.left - margins.right - legendPanel.width,
    height = 300 - margins.top - margins.bottom,
    series = "";

function doSynchronousLoop(gameData, gameResult) {

		var temp_players = [];
		var dataset = [];

		// console.log(temp_players);
   		for(var i=0;i<gameData.Qcount;i++){

   			var temp = {
   				data: [],
   				name: 'Question '+(i+1)
	    	};

			for(var j=0;j<gameData.playerList.length;j++ ){
				console.log(gameData.playerList[j]);
				var temp_player = {
									month : gameData.playerList[j],
									count : temp
								};
				temp.data.push(temp_player);
			}
	    	// var temp ={
			   //      data: [{
			   //          month: 'test1',
			   //          count: 0
			   //      }, {
			   //          month: 'test2',
			   //          count: 0
			   //      }],
			   //      name: 'Question '+i
		    // 	};

				dataset.push(temp);
		}
		console.log(gameResult);
		console.log(dataset);
		// console.log(JSON.stringify(dataset));
		return doSynchronousLoop2(dataset,gameResult);

}

function doSynchronousLoop2(dataset,gameResult){
   		for(key in gameResult){
	   			var Qid =  gameResult[key].Qid;
	   			var time = gameResult[key].time;
	   			var name = gameResult[key].name;


	   			for(item in dataset[Qid].data){
	   				if(dataset[Qid].data[item].month == name){

	   					dataset[Qid].data[item].count = time;

	   				}
	   			}

	   		
   		}
   		return dataset;

}

	
	$(document).ready(function() {
		var dataset = doSynchronousLoop(gameData, gameResult);

		// var temp_players = [];
		// var dataset = [];
		// for(var j=0;j<gameData.playerList.length;j++ ){
		// 	// setTimeout(function() {
		// 		console.log(gameData.playerList[j]);
		// 		var temp_player = {
		// 							month : gameData.playerList[j],
		// 							count : 0
		// 						};
		// 		console.log(temp_player);
		// 		temp_players.push(temp_player);
		// 	// }, 2000)

			
		// }
		// console.log(temp_players);
  //  		for(var i=0;i<gameData.Qcount;i++){
  //  			// setTimeout(function() {
	 //   			var temp = {
		// 	        data: temp_players,
		// 	        name: 'Question '+i
		//     	};
	    	

		// 		dataset.push(temp);
		// 		console.log(temp);
		// 	// }, 2000)
		// }
		// console.log(gameResult);
		// console.log(dataset);


		// 	// var temp = {
		//  //        data: [{
		//  //            month: 'DrChim',
		//  //            count: 0
		//  //        }, {
		//  //            month: 'DrHui',
		//  //            count: 0
		//  //        }],
		//  //        name: 'Question '+i
	 //  //   	};


		// //data : list of game result
		// dataset
		// 	[{name: Question 1
		// 	  data: [{
		//              month: 'DrChim',
		//              count: 0
		//          }, {
		//              month: 'DrHui',
		//              count: 0
		//          }],
		//          name: 'Question '+i
	 //     	},...]


		
  //  		for(key in gameResult){
  //  			// setTimeout(function() {
	 //   			var Qid =  gameResult[key].Qid;
	 //   			var time = gameResult[key].time;
	 //   			var name = gameResult[key].name;

	 //   			for( var r = 0 ; r<dataset[Qid].data.length; r++){
	 //   			// for(item in dataset[Qid].data){
	 //   				// setTimeout(function() {
		//    				if(dataset[Qid].data[r].month == name){

		//    					dataset[Qid].data[r].count = time;
		//    					// dataset[Qid].data[r] = {month: "Angel",count: time};
		// 					console.log("with time:" + time);
		   					
		//    					console.log("with name:" + name);
		//    					console.log("with Qid:" + Qid);
		//    					console.log(dataset);
		//    				}
	 //   				// }, 1000);
	 //   			}
  //  			// }, 1000);
  //  		}


			// dataset[Qid].data.forEach(function(item, index) {
			// 	if(item.month == name){
			// 	  dataset[Qid].data[index] = {month: item.month,count: time};
			// 	    console.log("enter:" + data[key].Qid);
   // 					console.log("with time:" + time);
   // 					console.log("with index:" + index);
   // 					console.log(dataset);
   // 					console.log(dataset[Qid].data[index].count);
			// 	}
			// 	index = index+1;
			// });

   		
	   		

		series = dataset.map(function (d) {
	        return d.name;
	    });
		dataset = dataset.map(function (d) {
	        return d.data.map(function (o, i) {
	            // Structure it so that your numeric
	            // axis (the stacked amount) is y
	            return {
	                y: o.count,
	                x: o.month
	            };
	        });
	    }),
	    stack = d3.layout.stack();
	    stack(dataset);
    	var dataset = dataset.map(function (group) {
		    return group.map(function (d) {
		        // Invert the x and y values, and y0 becomes x0
		        return {
		            x: d.y,
		            y: d.x,
		            x0: d.y0
		        };
		    });
		}),
	    svg = d3.select('body')
	        .append('svg')
	        .attr('width', width + margins.left + margins.right + legendPanel.width)
	        .attr('height', height + margins.top + margins.bottom)
	        .append('g')
	        .attr('transform', 'translate(' + margins.left + ',' + margins.top + ')'),
	    xMax = d3.max(dataset, function (group) {
	        return d3.max(group, function (d) {
	            return d.x + d.x0;
	        });
	    }),
	    xScale = d3.scale.linear()
	        .domain([0, xMax])
	        .range([0, width]),
	    months = dataset[0].map(function (d) {
	        return d.y;
	    }),
	    _ = console.log(months),
	    yScale = d3.scale.ordinal()
	        .domain(months)
	        .rangeRoundBands([0, height], .1),
	    xAxis = d3.svg.axis()
	        .scale(xScale)
	        .orient('bottom'),
	    yAxis = d3.svg.axis()
	        .scale(yScale)
	        .orient('left'),
	    colours = d3.scale.category10(),
	    groups = svg.selectAll('g')
	        .data(dataset)
	        .enter()
	        .append('g')
	        .style('fill', function (d, i) {
	        return colours(i);
	    }),
	    rects = groups.selectAll('rect')
	        .data(function (d) {
	        return d;
	    })
	        .enter()
	        .append('rect')
	        .attr('x', function (d) {
	        return xScale(d.x0);
	    })
	        .attr('y', function (d, i) {
	        return yScale(d.y);
	    })
	        .attr('height', function (d) {
	        return yScale.rangeBand();
	    })
	        .attr('width', function (d) {
	        return xScale(d.x);
	    })
	        .on('mouseover', function (d) {
	        var xPos = parseFloat(d3.select(this).attr('x')) / 2 + width / 2;
	        var yPos = parseFloat(d3.select(this).attr('y')) + yScale.rangeBand() / 2;

	        d3.select('#tooltip')
	            .style('left', xPos + 'px')
	            .style('top', yPos + 'px')
	            .select('#value')
	            .text(d.x);

	        d3.select('#tooltip').classed('hidden', false);
	    })
	        .on('mouseout', function () {
	        d3.select('#tooltip').classed('hidden', true);
	    })

	    svg.append('g')
	        .attr('class', 'axis')
	        .attr('transform', 'translate(0,' + height + ')')
	        .call(xAxis);

		svg.append('g')
		    .attr('class', 'axis')
		    .call(yAxis);

		svg.append('rect')
		    .attr('fill', 'yellow')
		    .attr('width', 160)
		    .attr('height', 30 * dataset.length)
		    .attr('x', width + margins.left)
		    .attr('y', 0);

		series.forEach(function (s, i) {
		    svg.append('text')
		        .attr('fill', 'black')
		        .attr('x', width + margins.left + 8)
		        .attr('y', i * 24 + 24)
		        .text(s);
		    svg.append('rect')
		        .attr('fill', colours(i))
		        .attr('width', 60)
		        .attr('height', 20)
		        .attr('x', width + margins.left + 90)
		        .attr('y', i * 24 + 6);
		});
	   
	});
		  //  		for(i=0;i<10;i++){
			// 	Donut3D.draw("Donut"+i, randomData(i), 450, 200*i+100, 130, 100, 30, 0);
			// }


</script>
</html>